package com.sri.RestApi.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.transaction.Transactional;

import org.hibernate.Session;
import org.hibernate.query.Query;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.sri.RestApi.model.Usertwo;

@Component
public class UserDaoImpl implements UserDao {
	
	
	// entity manager auto generated by spring
	private EntityManager entityManager;
	private List resultList;

	// using jpa query language instead of hibernateql

	// construction injection
	@Autowired
	public UserDaoImpl(EntityManager entityManager) {
		super();
		this.entityManager = entityManager;
	}
	
	
	

	@Override
	@Transactional
	public List<Usertwo> getAllUsers() {
		// TODO Auto-generated method stub
		// TODO Auto-generated method stub

				// get current hibernate session
				Session currentSession = entityManager.unwrap(Session.class);

				// create query//get it from org.hibernate.query

				Query<Usertwo> thequery = currentSession.createQuery("from Usertwo", Usertwo.class);

				// execute query and get result list

				List<Usertwo> usertwo = thequery.getResultList();

				// return

				// if jpaqery languaage

//				javax.persistence.Query thejpaQuery = entityManager.createQuery("from Employeeboot");
		//
//				List<Employeeboot> employees2 = thejpaQuery.getResultList();

				return usertwo;
		
	}

	@Override
	@Transactional
	public void addUser(Usertwo usertwo) {
		// TODO Auto-generated method stub
		
		System.out.println("received user is"+usertwo);
		
		
		Session currentSession = entityManager.unwrap(Session.class);
		
		Usertwo userobj=	entityManager.merge(usertwo);
			//
		//userobj.setId(usertwo.getId()); //for future reference
			
			currentSession.saveOrUpdate(usertwo);

	}

	@Override
	@Transactional
	public Usertwo getbyId(int id) {
		// TODO Auto-generated method stub
		Session currentSession = entityManager.unwrap(Session.class);

		Usertwo theUser = currentSession.get(Usertwo.class, id);
		
		//with jpa
		//Employeeboot theEmployee2 = entityManager.find(Employeeboot.class, id);

		return theUser;
		
		//return null;
	}

	@Override
	@Transactional
	public void removeUserById(int id) {
		// TODO Auto-generated method stub
		Session currentSession = entityManager.unwrap(Session.class);

		Usertwo usobj = currentSession.get(Usertwo.class, id);
		
		//entityManager.remove(empobj);

		currentSession.delete(usobj);
	}

}
